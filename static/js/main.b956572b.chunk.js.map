{"version":3,"sources":["Components/TitleBar.tsx","Pages/ReactionGame.tsx","assets/ReactionDemo.mp4","Components/ReactionExplanation.tsx","Pages/ReactionSetting.tsx","assets/MemoryDemo.mp4","Components/MemoryExplanation.tsx","Pages/MemoryGame.tsx","assets/reaction-colour.png","assets/memory-colour.png","Pages/GamesMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TitleBar","title","Typography","variant","gutterBottom","style","margin","to","textDecoration","float","marginRight","Button","color","id","useStyles","makeStyles","scoreCard","backgroundColor","padding","position","bottom","marginLeft","borderRadius","marginBottom","victory","display","fontSize","width","menu","ReactionGame","styleSheet","data","useLocation","classes","state","gameGoal","goal","useState","score","setScore","missed","setMissed","minValue","destroyCircle","circle","method","s","randomCirclePosition","max","Math","floor","random","createCircle","body","circleTarget","document","createElement","classList","add","size","height","animation","rate","head","appendChild","sheet","insertRule","children","length","colour","left","window","innerWidth","top","innerHeight","addEventListener","getElementById","useEffect","interval","setInterval","gameScreen","clearInterval","className","animate","animationDuration","responsive","lineWidth","progress","progressColor","bgColor","textColor","textStyle","font","percentSpacing","roundedStroke","showPercentage","showPercentageSymbol","textAlign","marginTop","video","ReactionExplanation","controls","src","ReactionDemo","type","theme","createStyles","spacing","typography","beginGame","right","setting","justifyContent","alignItems","modes","flexDirection","flexWrap","alignContent","inputs","ReactionSetting","setColour","currentMode","setCurrentMode","circleSize","shrinkRate","circleValues","setCircleValues","handleChange","prop","event","target","value","changeModes","mode","undefined","opacity","anchorEl","setAnchorEl","open","Boolean","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","onClick","console","log","currentTarget","icon","InfoIcon","FormControl","InputLabel","htmlFor","OutlinedInput","onChange","endAdornment","InputAdornment","labelWidth","triangle","onChangeComplete","hex","pathname","MemoryExplanation","MemoryDemo","controlPanel","defeat","MemoryGame","totalCells","Array","boardSize","currentNumber","currentLevel","gameStarted","revealCard","cell","innerHTML","toString","i","col","newCol","cloneNode","selectRandomNumber","contains","array","element","createGame","level","j","push","addedNumbers","chosenNum","charAt","board","rows","row","remove","clearGame","GamesMenu","gameIcon","hidden","x","visible","motion","div","variants","transition","delay","when","stiffness","staggerChildren","initial","img","ReactionColourIcon","alt","MemoryColourIcon","href","App","basename","process","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b956572b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { Typography, Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nTitleBar.propTypes = {\n  title: PropTypes.string\n}\n\n// Title and button to navigate back to main menu\nexport default function TitleBar({title} : {title: string}) {\n  return(\n    <Typography variant=\"h3\" gutterBottom style={{ margin: \"15px\" }}>\n      {title} \n        <Link to=\"/gameMenu\" style={{  textDecoration: \"none\", float:\"right\", marginRight: \"10px\" }}>\n          <Button style={{ color: \"#8C8185\"}} > \n            <span id=\"menuButton\">Switch games</span>\n          </Button>   \n        </Link>\n    </Typography>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport '../App.css';\nimport { useLocation } from 'react-router-dom';\nimport Circle from 'react-circle';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TitleBar  from \"../Components/TitleBar\";\n\ninterface CircleStats {\n  colour: string;\n  size: string;\n  rate: string;\n  goal: number;\n}\n\nconst useStyles = makeStyles({\n  scoreCard: {\n    backgroundColor: \"white\", \n    padding: \"10px\", \n    position: 'absolute', \n    bottom:\"50%\", \n    marginLeft: \"15px\",\n    borderRadius: \"15px\"\n  },\n  bottom: {\n    marginBottom: \"5px\"\n  },\n  victory: {\n    display: \"none\",\n    fontSize: 24,\n    color: \"white\",\n    backgroundColor: \"#31BFF3\",\n    width: \"80px\",\n    margin: \"auto\",\n    padding: \"5px\",\n    borderRadius: \"15px\"\n  },\n  menu: {\n    backgroundColor: \"#F6E683\",\n    padding: \"5px\",\n    borderRadius: \"10px\"\n  }\n});\n\nexport default function ReactionGame() {\n  const data = useLocation();\n  const classes = useStyles();\n  // The setting data provide by the user \n  const state = data.state as CircleStats;\n   // Variables that tracks game state\n  const gameGoal = state.goal;\n  const [score, setScore] = useState(0);\n  const [missed, setMissed] = useState(0);\n  let styleSheet: HTMLStyleElement;\n  //Ensure circles doesnt spawn outside the window\n  const minValue = 100;\n  const destroyCircle = (circle: HTMLDivElement, method: string) => {\n    circle.style.display = \"none\";\n    // Cirlce has been clicked\n    if (method === \"clicked\") setScore(s => s + 1);\n    // Cirlce has shrunk to nothing\n    else setMissed(s => s + 1);\n  }\n  // Customise the circle shrink rate\n  const createCircleAnimation = (body: string) => {\n    if (!styleSheet) {\n      styleSheet = document.createElement('style');\n      document.head.appendChild(styleSheet);\n    } \n    styleSheet.sheet!.insertRule(body, styleSheet.children.length);\n  }\n  // Provides a random position for each circle\n  const randomCirclePosition = (max: number) => {\n    return Math.floor(Math.random() * (max - minValue) + minValue);\n  }\n  // Adds all the features of the circle\n  const createCircle = () => {\n      const circleTarget = document.createElement('div');\n      circleTarget.classList.add(\"circle\");\n      circleTarget.style.width = state.size + \"px\";\n      circleTarget.style.height = state.size + \"px\";\n      circleTarget.style.animation = `circleShrink ${state.rate}s ease-in`;\n      createCircleAnimation(`\n        @keyframes circleShrink { \n          from {\n            width: ${state.size}px;\n            height: ${state.size}px;\n          }\n          to {\n            width: 0px;\n            height: 0px;\n          }\n        }`\n      );\n      circleTarget.id = \"id\" + score;\n      circleTarget.style.backgroundColor = state.colour;\n      circleTarget.style.left = randomCirclePosition(window.innerWidth - minValue) + \"px\"; \n      circleTarget.style.top = randomCirclePosition(window.innerHeight - minValue)+ \"px\";\n      // EventListener for if the circle shrunk to nothing\n      circleTarget.addEventListener(\"animationend\", () => { destroyCircle(circleTarget, \"timeout\") }, false);\n      // EventListener for if the circle is clicked \n      circleTarget.addEventListener(\"click\", () => { destroyCircle(circleTarget, \"clicked\") }, false);\n      document.getElementById(\"gameScreen\")!.appendChild(circleTarget);\n  }\n\n  useEffect(() => {\n    // Spawns a circle ever 0.5 secs\n    const interval = window.setInterval(() => {\n      // Checks if the goal has been achieved\n      if (score < gameGoal) {\n        createCircle();\n      } else {\n        // Remove all the other circles still on the board\n        const gameScreen = document.getElementById(\"gameScreen\");\n        if (gameScreen !== null) gameScreen.style.display = \"none\";\n        // User is victorious\n        clearInterval(interval);\n        document.getElementById('menuButton')!.className = classes.menu;\n        document.getElementById(\"victory\")!.style.display = \"block\";\n        return;\n      }\n    }, 500);\n    return () => clearInterval(interval);\n  });\n\n  return (\n    <div>\n      <TitleBar title={\"Reaction Game\"}/>\n      <div className={classes.scoreCard}>\n        <div>Score: {score}</div>\n        <div className={classes.bottom}>Missed: {missed}</div>\n        <Circle\n          animate={true} \n          animationDuration=\"1s\" \n          responsive={false} \n          size=\"100\" \n          lineWidth=\"25\" \n          // Progess bar out of 100 -> divide by set goal\n          progress={Math.floor(score * (100 / gameGoal))}\n          progressColor=\"rgb(76, 154, 255)\" \n          bgColor=\"#ecedf0\" \n          textColor=\"#6b778c\" \n          textStyle={{\n            font: 'bold 4rem Helvetica, Arial, sans-serif'\n          }}\n          percentSpacing={10} \n          roundedStroke={false}\n          showPercentage={true} \n          showPercentageSymbol={true}\n        />\n      </div>\n      <div id=\"gameScreen\"></div>\n      <div id=\"victory\" className={classes.victory}>Victory!</div>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/ReactionDemo.220a6501.mp4\";","import { Typography } from \"@material-ui/core\";\nimport ReactionDemo from \"../assets/ReactionDemo.mp4\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  title: {\n    textAlign: \"center\",\n    marginTop: \"20px\"\n  },\n  video: {\n    padding: \"20px\",\n    backgroundColor: \"#A484E9\",\n    borderRadius: \"20px\",\n    width: \"38%\",\n    display: \"block\",\n    margin: \"auto\",\n    marginBottom: \"10px\"\n  }\n});\n\n// Explanation for the reaction game (vid)\nexport default function ReactionExplanation() {\n  const classes = useStyles();\n  return(\n    <div>\n      <Typography variant=\"h5\" gutterBottom className={classes.title}>\n        How to play \n      </Typography>\n      <video className={classes.video} controls > \n        <source src={ReactionDemo} type=\"video/mp4\" />\n      </video>\n    </div>\n  );\n}\n","import { useState, ChangeEvent } from 'react'\nimport { Link } from 'react-router-dom';\nimport '../App.css';\nimport { TwitterPicker } from 'react-color';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport {\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  FormControl,\n  Typography,\n  Button,\n  Popover \n} from '@material-ui/core';\nimport { Icon } from '@iconify/react';\nimport InfoIcon from '@iconify/icons-eva/info-outline';\nimport TitleBar from \"../Components/TitleBar\"\nimport ReactionExplanation from \"../Components/ReactionExplanation\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textAlign: \"center\"\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    typography: {\n      padding: theme.spacing(2),\n      width: \"200px\"\n    },\n    beginGame: {\n      position: \"absolute\",\n      margin: \"24px\",\n      top: 40,\n      right: 0,\n    },\n    setting: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"flex-start\",\n    },\n    modes: {\n      display: \"flex\", \n      flexDirection: \"column\", \n      flexWrap: \"wrap\", \n      alignContent: \"center\",\n      marginTop: \"auto\", \n      marginBottom: \"auto\"\n    },\n    inputs: {\n      width:\"200px\", \n      backgroundColor: \"white\", \n      padding: \"10px\", \n      borderRadius: \"15px\", \n      marginRight: \"20px\", \n      marginLeft: \"20px\"\n    }\n  }),\n);\n\ninterface CircleStats {\n  circleSize: string;\n  shrinkRate: string;\n  goal: number;\n}\n\nexport default function ReactionSetting() {\n  const classes = useStyles();\n  // Variables that have default values but can be altered to user preference\n  const [colour, setColour] = useState(\"#ff0000\");\n  const [currentMode, setCurrentMode] = useState(\"Normal\");\n  const [circleValues, setCircleValues] = useState<CircleStats>({\n    circleSize: \"30\",\n    shrinkRate: \"2\",\n    goal: 15\n  });\n  // Changes values of circleValues according to user input\n  const handleChange = (prop: keyof CircleStats) => (event: ChangeEvent<HTMLInputElement>) => {\n    setCircleValues({ ...circleValues, [prop]: event.target.value });\n  };\n  // Change from different pre-set modes\n  const changeModes = (mode: string) => {\n    if (document.getElementById(currentMode) !== undefined \n      && document.getElementById(currentMode) !== null) document.getElementById(currentMode)!.style.opacity = \"1\";\n    if (document.getElementById(mode) !== undefined) document.getElementById(mode)!.style.opacity = \"0.4\";\n    setCurrentMode(mode);\n    if (mode === \"Easy\") {\n      setCircleValues({\n        circleSize: \"40\",\n        shrinkRate: \"2\",\n        goal: 10\n      })\n    } else if (mode === \"Hard\") {\n      setCircleValues({\n        circleSize: \"25\",\n        shrinkRate: \"1\",\n        goal: 20\n      })\n    } else {\n      setCircleValues({\n        circleSize: \"30\",\n        shrinkRate: \"1.5\",\n        goal: 15\n      })\n    }\n  }\n  // Variables for popover (info button)\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    console.log(event.currentTarget)\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return(\n    <div>\n        <TitleBar title={\"Reaction Game\"}/>\n        <div>\n          <Typography variant=\"h4\" gutterBottom className={classes.title}>\n            Setting\n          </Typography>\n          <Popover\n            id={id}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'center',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'center',\n            }}\n          >\n            <Typography className={classes.typography}>\n              3 pre-set modes available. Feel free to alter to your preference.\n            </Typography>\n          </Popover>\n        </div>\n        <div className={classes.setting}>\n          <div className={classes.modes}>\n            <Button id=\"Easy\" onClick={()=>{changeModes(\"Easy\")}}>Easy</Button>\n            <Button id=\"Normal\" onClick={()=>{changeModes(\"Normal\")}}>Normal</Button>    \n            <Button id=\"Hard\" onClick={()=>{changeModes(\"Hard\")}}>Hard</Button> \n            <Button onClick={handleClick}>\n              <Icon icon={InfoIcon} width=\"23\" height=\"23\" />\n            </Button>\n          </div> \n          <div className={classes.inputs}>\n            <FormControl className={classes.margin} variant=\"outlined\">\n              <InputLabel htmlFor=\"circleSize\">Circle Size</InputLabel>\n              <OutlinedInput\n                  id=\"circleSize\"\n                  onChange={handleChange(\"circleSize\")}\n                  value={circleValues.circleSize}\n                  endAdornment={<InputAdornment position=\"end\">px</InputAdornment>}\n                  labelWidth={80}\n                />\n            </FormControl>\n            <FormControl className={classes.margin} variant=\"outlined\">\n              <InputLabel htmlFor=\"shrinkRate\">Shrink Rate</InputLabel>\n              <OutlinedInput\n                id=\"shrinkRate\"\n                onChange={handleChange(\"shrinkRate\")}\n                value={circleValues.shrinkRate}\n                endAdornment={<InputAdornment position=\"end\">sec</InputAdornment>}\n                labelWidth={90}\n              />\n            </FormControl>\n            <FormControl className={classes.margin} variant=\"outlined\">\n              <InputLabel htmlFor=\"goal\">Target Goal</InputLabel>\n              <OutlinedInput\n                id=\"goal\"\n                onChange={handleChange(\"goal\")}\n                value={circleValues.goal}\n                endAdornment={<InputAdornment position=\"end\">circles</InputAdornment>}\n                labelWidth={90}\n              />\n            </FormControl>\n          </div>\n          <div>\n            <TwitterPicker \n                triangle=\"hide\"\n                color={colour}\n                onChangeComplete={(colour) => {setColour(colour.hex)}}\n              />\n            <div id=\"settingsCircle\" style={{ \n                backgroundColor: colour, \n                width: circleValues.circleSize+\"px\",\n                height: circleValues.circleSize+\"px\",\n            }}></div>\n          </div>\n        </div>\n        <Link to={{\n          pathname: \"/reactionGame\",\n          state: {\n            colour: colour,\n            size: circleValues.circleSize,\n            rate: circleValues.shrinkRate,\n            goal: circleValues.goal\n          }\n        }}>\n          <Button className={classes.beginGame} >\n            <Typography style={{ color: \"#8C8185\" }}> Begin Game</Typography>\n          </Button>   \n        </Link>\n      <ReactionExplanation />\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/MemoryDemo.30bd2b4c.mp4\";","import { Typography } from \"@material-ui/core\";\nimport MemoryDemo from \"../assets/MemoryDemo.mp4\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  title: {\n    textAlign: \"center\"\n  },\n  video: {\n    padding: \"20px\",\n    backgroundColor: \"#A484E9\",\n    borderRadius: \"20px\",\n    width: \"60%\",\n    display: \"block\",\n    margin: \"auto\",\n    marginBottom: \"10px\"\n  }\n});\n\n// Explanation for the memory game (vid)\nexport default function MemoryExplanation() {\n  const classes = useStyles();\n  return(\n    <div>\n      <Typography variant=\"h4\" gutterBottom className={classes.title}>\n        How to play \n      </Typography>\n      <video className={classes.video} controls > \n        <source src={MemoryDemo} type=\"video/mp4\" />\n      </video>\n    </div>\n  );\n}\n","import '../App.css';\nimport { useEffect } from 'react';\nimport MemoryExplanation from '../Components/MemoryExplanation';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Typography }  from '@material-ui/core';\nimport TitleBar  from \"../Components/TitleBar\";\n\nconst useStyles = makeStyles({\n  controlPanel: {\n    position: \"absolute\",\n    width: 120,\n    backgroundColor: \"white\",\n    padding: 10,\n    bottom: \"50%\",\n    marginLeft: \"15px\",\n    borderRadius: \"15px\"\n  },\n  beginGame: {\n    position: \"absolute\",\n    margin: \"24px\",\n    top: 40,\n    right: 0,\n  },\n  defeat: {\n    display: \"none\",\n    fontSize: 24,\n    color: \"white\",\n    backgroundColor: \"#FFAF68\",\n    width: \"120px\",\n    margin: \"auto\",\n    padding: \"5px\",\n    borderRadius: \"15px\"\n  },\n  menu: {\n    backgroundColor: \"#F6E683\",\n    padding: \"5px\",\n    borderRadius: \"10px\"\n  }\n});\n\nexport default function MemoryGame() {\n  const classes = useStyles();\n  // A list of all cells created\n  const totalCells = new Array<string>();\n  // The size of the board (max 100 numbers)\n  const boardSize = 10;\n  // Variables that tracks game state\n  let currentNumber = 1;\n  let currentLevel = 1;\n  let gameStarted = false;\n\n  // Reset all the variables and clean the board\n  const clearGame = () => {\n    currentLevel++;\n    currentNumber = 1;\n    totalCells.length = 0;\n    gameStarted = false;\n    for (let i = 0; i < boardSize; i++) { \n      const col = document.getElementById(`col ${i}`);\n      if (col !== null) col.remove();\n    }\n  }\n\n  const revealCard = (cell: HTMLDivElement) => {\n     // Ensure the cards dont reveal before the game started\n    if (gameStarted) {\n      cell.innerHTML = cell.id;\n      cell.style.color = \"white\";\n      // Incorrect input, game is over\n      if (cell.id !== currentNumber.toString()) {\n        cell.style.backgroundColor = \"#F4889A\";\n        // Copies the current column which removes all eventListeners\n        for (let i = 0; i < boardSize; i++) { \n          const col = document.getElementById(`col ${i}`);\n          if (col !== null) {\n            // Copying removes the eventListeners\n            const newCol = col.cloneNode(true);\n            document.getElementById(\"memoryBoard\")!.appendChild(newCol);\n            col.style.display = \"none\";\n          } \n        }\n        document.getElementById('defeat')!.style.display = \"block\";\n        document.getElementById('menuButton')!.className = classes.menu;\n      } else {\n        // Correct input\n        cell.style.backgroundColor = \"#79D45E\";\n        currentNumber++;\n        // The round is completed\n        if (cell.id === currentLevel.toString()) document.getElementById(\"nextRound\")!.style.display = \"block\";\n      } \n    }\n  }\n\n  const selectRandomNumber = (max: number) => Math.floor(Math.random() * max) + 1;\n  \n  // Check if an element is in an array\n  const contains = (array: Array<number>, element: number) => {\n    for(let i = 0; i < array.length; i++) {\n      if(element === array[i]) return true;\n    }\n    return false;\n  }\n\n  // Create game depending on the current level\n  const createGame = (level: number) => {\n    document.getElementById(\"nextRound\")!.style.display = \"none\";\n    // Create the the initial board\n    for (let i = 0; i < boardSize; i++) {\n      // Create the column\n      const col = document.createElement(\"div\");\n      col.id = `col ${i}`;\n      // Create individual cells (tiles)\n      for (let j = 0; j < boardSize; j++) {\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"boardCell\");\n        cell.id = `(${i},${j})`;\n        totalCells.push(cell.id);\n        cell.innerHTML = \"\";\n        cell.addEventListener(\"click\", () => {revealCard(cell)});\n        col.appendChild(cell);\n      }\n      // Add the cell to the column\n      if (document.getElementById(\"memoryBoard\") !== null) document.getElementById(\"memoryBoard\")?.appendChild(col);\n    }\n    // A list of numbers that have been added to the board\n    const addedNumbers = new Array<number>();\n    /* Continues until all numbers are added\n    e.g. If the current level is 3, ensure that \n         1, 2, 3 have all been added\n    */\n    while (addedNumbers.length < level) {\n      for (let i = 0; i < boardSize**2; i++) {\n        if (selectRandomNumber(2) === 1) {\n          const chosenNum = selectRandomNumber(level);\n          if (document.getElementById(totalCells[i]) !== null) {\n            const cell = document.getElementById(totalCells[i])!;\n            if (!contains(addedNumbers, chosenNum)) {\n              cell.innerHTML = cell.id = chosenNum.toString();\n              addedNumbers.push(chosenNum);\n            } \n          }\n        }\n      }\n    } \n    // Removes white/empty cells\n    for (let i = 0; i < boardSize**2; i++) {\n      const cell = document.getElementById(totalCells[i]);\n      // Populated cell has a \"number\" as id \n      if (cell !== null && cell.id.charAt(0) === \"(\") {\n        document.getElementById(totalCells[i])!.style.display = \"none\";\n      }\n    }\n  }\n\n  useEffect(()=> {\n    createGame(currentLevel);\n  })\n  \n  const startGame = () => {\n    // Disables \"Start Game\" button after the round has started\n    if (gameStarted) return;\n    const board = document.getElementById(\"memoryBoard\");\n    gameStarted = true;\n    if (board !== null) {\n      const rows = board.children;\n      // Loops through the board and flips the cells\n      for (let i = 0; i < rows.length; i++) {\n        const row = rows[i].children;\n        for (let i = 0; i < row.length; i++) {\n          const cell = row[i];\n          cell.innerHTML = \" \";\n        }\n      }\n    }\n  }\n\n  // Advances to the next round\n  const nextRound = () => {\n    clearGame();\n    createGame(currentLevel);\n    document.getElementById(\"levelTracker\")!.innerHTML = ` ${currentLevel}`\n  }\n\n  // Change from explanantion to game\n  const switchScene = () => {\n    document.getElementById(\"memoryExplanation\")!.style.display = \"none\";\n    document.getElementById(\"memoryGame\")!.style.display = \"block\";\n  }\n\n  return(\n    <div> \n      <TitleBar title={\"Memory Game\"} />\n      <div id=\"memoryExplanation\">\n        <MemoryExplanation />\n        <Button onClick={switchScene} className={classes.beginGame} >\n          <Typography style={{ color: \"#8C8185\"}}> Begin Game</Typography>\n        </Button>\n      </div>\n      <div id=\"memoryGame\"> \n        <div id=\"defeat\" className={classes.defeat}>Game Over\n        </div>\n        <div className={classes.controlPanel}> \n          <div>\n            Current Level: <span id=\"levelTracker\">1</span>\n          </div>\n          <div>\n            <Button onClick={startGame}>Start game</Button>\n            <Button id=\"nextRound\" onClick={nextRound}>Next round</Button>\n          </div>\n        </div>\n        <div id=\"memoryBoard\"></div>\n      </div>\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/reaction-colour.e4ae3958.png\";","export default __webpack_public_path__ + \"static/media/memory-colour.a8f728ae.png\";","import { Link } from 'react-router-dom';\nimport ReactionColourIcon from \"../assets/reaction-colour.png\";\nimport MemoryColourIcon from \"../assets/memory-colour.png\";\nimport '../App.css';\nimport { motion } from 'framer-motion';\n\n// Landing Page\nexport default function GamesMenu() {\n  const mainMenu = {\n    hidden: {\n      x: \"-200vw\"\n    },\n    visible: {\n      x: \"1vw\",\n      transition: {\n        delay: 0.5,\n        when: \"beforeChildren\",\n        stiffness: 45,\n        type:\"spring\",  \n        staggerChildren: 0.3\n      },\n    }, \n  }\n\n  const gameIcon = {\n    hidden: {\n      x: -10,\n      opacity: 0\n    },\n    visible: {\n      x: 0,\n      opacity: 1,\n    }\n  }\n\n  return(\n    <div style={{ display:\"flex\", justifyContent: \"center\" }}>\n      <motion.div \n        id=\"icons\" \n        variants={mainMenu}\n        animate=\"visible\"\n        initial=\"hidden\"\n      >\n        <div className=\"games\">\n          <Link to=\"/reactionSetting\">\n            <motion.img src={ReactionColourIcon } alt=\"reaction game\" width=\"150px\" variants={gameIcon}/> \n          </Link>\n        </div>\n        <div className=\"games\" >\n          <Link to=\"/memoryGame\">\n            <motion.img src={MemoryColourIcon} alt=\"memory game\" width=\"150px\" variants={gameIcon}/>\n          </Link>\n        </div>\n      </motion.div>\n      <div id=\"imgReference\">Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">[Freepik]</a> \n      from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">[www.flaticon.com]</a></div>\n    </div>\n  );\n}\n","import ReactionGame from './Pages/ReactionGame';\nimport ReactionSetting from './Pages/ReactionSetting';\nimport MemoryGame from './Pages/MemoryGame';\nimport GamesMenu from './Pages/GamesMenu';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nexport default function App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <Switch>\n          <Route path=\"/reactionGame\">\n            <ReactionGame />\n          </Route>\n          <Route path=\"/reactionSetting\">\n            <ReactionSetting />\n          </Route>\n          <Route path=\"/memoryGame\">\n            <MemoryGame />\n          </Route>\n          <Route path=\"/\">\n            <GamesMenu />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}