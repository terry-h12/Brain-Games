{"version":3,"sources":["Components/TitleBar.tsx","Pages/ReactionGame.tsx","Pages/ReactionSetting.tsx","Components/MemoryExplanation.tsx","Pages/MemoryGame.tsx","assets/reaction-colour.png","assets/memory-colour.png","Pages/GamesMenu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TitleBar","title","Typography","variant","gutterBottom","style","margin","to","textDecoration","float","marginRight","Button","color","useStyles","makeStyles","scoreCard","backgroundColor","padding","position","bottom","marginLeft","borderRadius","marginBottom","ReactionGame","styleSheet","data","useLocation","classes","state","gameGoal","goal","useState","score","setScore","missed","setMissed","destroyCircle","circle","method","display","s","randomCirclePosition","max","Math","floor","random","createCircle","body","circleTarget","document","createElement","classList","add","width","size","height","animation","rate","head","appendChild","sheet","insertRule","children","length","id","colour","left","top","addEventListener","getElementById","useEffect","interval","window","setInterval","console","log","clearInterval","className","animate","animationDuration","responsive","lineWidth","progress","progressColor","bgColor","textColor","textStyle","font","percentSpacing","roundedStroke","showPercentage","showPercentageSymbol","theme","createStyles","spacing","typography","beginGame","right","setting","justifyContent","alignItems","modes","flexDirection","flexWrap","alignContent","marginTop","inputs","ReactionSetting","setColour","currentMode","setCurrentMode","circleSize","shrinkRate","circleValues","setCircleValues","handleChange","prop","event","target","value","changeModes","mode","undefined","opacity","anchorEl","setAnchorEl","open","Boolean","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","onClick","currentTarget","icon","InfoIcon","FormControl","InputLabel","htmlFor","OutlinedInput","onChange","endAdornment","InputAdornment","labelWidth","triangle","onChangeComplete","hex","pathname","MemoryExplanation","textAlign","root","maxWidth","bullet","transform","fontSize","pos","controlPanel","MemoryGame","currentNumber","currentLevel","totalCells","Array","gameStarted","revealCard","cell","innerHTML","toString","createGame","level","selectNumber","contains","array","element","i","col","j","push","addedNumbers","chosenNum","charAt","board","rows","row","remove","clearGame","GamesMenu","gameIcon","hidden","x","visible","motion","div","variants","transition","delay","when","stiffness","type","staggerChildren","initial","img","src","ReactionColourIcon","alt","MemoryColourIcon","href","App","basename","process","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.61f8f224.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { Typography, Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nTitleBar.propTypes = {\n  title: PropTypes.string\n}\n\nexport default function TitleBar({title} : {title: string}) {\n  return(\n    <Typography variant=\"h3\" gutterBottom style={{ margin: \"15px\" }}>\n      {title} \n      <Link to=\"/gameMenu\" style={{  textDecoration: \"none\", float:\"right\", marginRight: \"10px\" }}>\n        <Button style={{ color: \"#8C8185\"}}> \n          Switch games\n        </Button>   \n      </Link>\n    </Typography>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport '../App.css';\nimport { useLocation } from 'react-router-dom';\nimport Circle from 'react-circle';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TitleBar  from \"../Components/TitleBar\";\n\ninterface CircleStats {\n  colour: string;\n  size: string;\n  rate: string;\n  goal: number;\n}\n\nconst useStyles = makeStyles({\n  scoreCard: {\n    backgroundColor: \"white\", \n    padding: \"10px\", \n    position: 'absolute', \n    bottom:\"50%\", \n    marginLeft: \"15px\",\n    borderRadius: \"15px\"\n  },\n  bottom: {\n    marginBottom: \"5px\"\n  }\n});\n\nexport default function ReactionGame() {\n  const data = useLocation();\n  const classes = useStyles();\n  const state = data.state as CircleStats;\n  const gameGoal = state.goal;\n  const [score, setScore] = useState(0);\n  const [missed, setMissed] = useState(0);\n\n  // CIrlce has been clicked or shrunk to nothing\n  const destroyCircle = (circle: HTMLDivElement, method: string) => {\n    circle.style.display = \"none\";\n    if (method === \"clicked\") setScore(s => s + 1);\n    else setMissed(s => s + 1);\n    \n  }\n  let styleSheet: HTMLStyleElement;\n  const createCircleAnimation = (body: string) => {\n    if (!styleSheet) {\n      styleSheet = document.createElement('style');\n      document.head.appendChild(styleSheet);\n    } \n    styleSheet.sheet!.insertRule(body, styleSheet.children.length);\n  }\n\n  // Provides a random position for each circle\n  const randomCirclePosition = (max: number) =>{\n    const min = 100;\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  const createCircle = () => {\n      const circleTarget = document.createElement('div');\n      circleTarget.classList.add(\"circle\");\n      circleTarget.style.width = state.size + \"px\";\n      circleTarget.style.height = state.size + \"px\";\n      circleTarget.style.animation = `circleShrink ${state.rate}s ease-in`;\n      createCircleAnimation(`\n        @keyframes circleShrink { \n          from {\n            width: ${state.size}px;\n            height: ${state.size}px;\n          }\n          to {\n            width: 0px;\n            height: 0px;\n          }\n        }`\n      );\n      circleTarget.id = \"id\" + score;\n      circleTarget.style.backgroundColor = state.colour;\n      circleTarget.style.left = randomCirclePosition(780) + \"px\"; \n      circleTarget.style.top = randomCirclePosition(150)+ \"px\";\n      circleTarget.addEventListener(\"animationend\", () => { destroyCircle(circleTarget, \"timeout\") }, false) \n      circleTarget.addEventListener(\"click\", () => { destroyCircle(circleTarget, \"clicked\") }, false);\n      document.getElementById('gameScreen')!.appendChild(circleTarget);\n  }\n\n  useEffect(() => {\n    const interval = window.setInterval(() => {\n      if (score < gameGoal) {\n        createCircle();\n      } else {\n        console.log(\"victory\");\n        clearInterval(interval);\n        document.getElementById('reactionVictory')!.style.display = \"block\";\n        return;\n      }\n    }, 500);\n    \n    return () => clearInterval(interval);\n  });\n\n  return (\n    <div>\n      <TitleBar title={\"Reaction Game\"}/>\n      <div className={classes.scoreCard}>\n        <div>Score: {score}</div>\n        <div className={classes.bottom}>Missed: {missed}</div>\n        <Circle\n          animate={true} \n          animationDuration=\"1s\" \n          responsive={false} \n          size=\"100\" \n          lineWidth=\"25\" \n          // Progess bar out of 100 -> divide by set goal\n          progress={Math.floor(score * (100/gameGoal))}\n          progressColor=\"rgb(76, 154, 255)\" \n          bgColor=\"#ecedf0\" \n          textColor=\"#6b778c\" \n          textStyle={{\n            font: 'bold 4rem Helvetica, Arial, sans-serif'\n          }}\n          percentSpacing={10} \n          roundedStroke={false}\n          showPercentage={true} \n          showPercentageSymbol={true}\n        />\n      </div>\n      <div id=\"gameScreen\">\n        <div id=\"reactionVictory\">\n          VICTORY\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useState, ChangeEvent } from 'react'\nimport { Link } from 'react-router-dom';\nimport '../App.css';\nimport { TwitterPicker } from 'react-color';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport {\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  FormControl,\n  Typography,\n  Button,\n  Popover \n} from '@material-ui/core';\nimport { Icon } from '@iconify/react';\nimport InfoIcon from '@iconify/icons-eva/info-outline';\nimport TitleBar from \"../Components/TitleBar\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    margin: {\n      margin: theme.spacing(1),\n    },\n    typography: {\n      padding: theme.spacing(2),\n      width: \"200px\"\n    },\n    beginGame: {\n      position: \"absolute\",\n      margin: \"24px\",\n      top: 40,\n      right: 0,\n    },\n    setting: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"flex-start\",\n    },\n    modes: {\n      display: \"flex\", \n      flexDirection: \"column\", \n      flexWrap: \"wrap\", \n      alignContent: \"center\",\n      marginTop: \"auto\", \n      marginBottom: \"auto\"\n    },\n    inputs: {\n      width:\"200px\", \n      backgroundColor: \"white\", \n      padding: \"10px\", \n      borderRadius: \"15px\", \n      marginRight: \"20px\", \n      marginLeft: \"20px\"\n    }\n  }),\n);\n\ninterface CircleStats {\n  circleSize: string;\n  shrinkRate: string;\n  goal: number;\n}\n\nexport default function ReactionSetting() {\n  const classes = useStyles();\n  const [colour, setColour] = useState(\"#ff0000\");\n  const [currentMode, setCurrentMode] = useState(\"Normal\");\n  const [circleValues, setCircleValues] = useState<CircleStats>({\n    circleSize: \"30\",\n    shrinkRate: \"2\",\n    goal: 15\n  });\n  const handleChange = (prop: keyof CircleStats) => (event: ChangeEvent<HTMLInputElement>) => {\n    setCircleValues({ ...circleValues, [prop]: event.target.value });\n  };\n\n  const changeModes = (mode: string) => {\n    if (document.getElementById(currentMode) !== undefined \n      && document.getElementById(currentMode) !== null) document.getElementById(currentMode)!.style.opacity = \"1\";\n    if (document.getElementById(mode) !== undefined) document.getElementById(mode)!.style.opacity = \"0.4\";\n    setCurrentMode(mode);\n    if (mode === \"Easy\") {\n      setCircleValues({\n        circleSize: \"40\",\n        shrinkRate: \"2\",\n        goal: 10\n      })\n    } else if (mode === \"Hard\") {\n      setCircleValues({\n        circleSize: \"25\",\n        shrinkRate: \"1\",\n        goal: 20\n      })\n    } else {\n      setCircleValues({\n        circleSize: \"30\",\n        shrinkRate: \"1.5\",\n        goal: 15\n      })\n    }\n  }\n  \n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    console.log(event.currentTarget)\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return(\n    <div>\n        <TitleBar title={\"Reaction Game\"}/>\n        <div>\n          <Popover\n            id={id}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'center',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'center',\n            }}\n          >\n            <Typography className={classes.typography}>\n              {/* This game test your reaction by displaying circles that will\n              continue to shrink until it disappers. Your goal is to click on\n              the click as fast as possible before the circle disappears. */}\n              3 pre-set modes available. Feel free to alter to your preference.\n            </Typography>\n          </Popover>\n        </div>\n      <div className={classes.setting}>\n        <div className={classes.modes}>\n          <Button id=\"Easy\" onClick={()=>{changeModes(\"Easy\")}}>Easy</Button>\n          <Button id=\"Normal\" onClick={()=>{changeModes(\"Normal\")}}>Normal</Button>    \n          <Button id=\"Hard\" onClick={()=>{changeModes(\"Hard\")}}>Hard</Button> \n          <Button onClick={handleClick}>\n            <Icon icon={InfoIcon} width=\"23\" height=\"23\" />\n          </Button>\n        </div> \n        <div className={classes.inputs}>\n          <FormControl className={classes.margin} variant=\"outlined\">\n            <InputLabel htmlFor=\"circleSize\">Circle Size</InputLabel>\n            <OutlinedInput\n                id=\"circleSize\"\n                onChange={handleChange(\"circleSize\")}\n                value={circleValues.circleSize}\n                endAdornment={<InputAdornment position=\"end\">px</InputAdornment>}\n                labelWidth={80}\n              />\n          </FormControl>\n          <FormControl className={classes.margin} variant=\"outlined\">\n            <InputLabel htmlFor=\"shrinkRate\">Shrink Rate</InputLabel>\n            <OutlinedInput\n              id=\"shrinkRate\"\n              onChange={handleChange(\"shrinkRate\")}\n              value={circleValues.shrinkRate}\n              endAdornment={<InputAdornment position=\"end\">sec</InputAdornment>}\n              labelWidth={90}\n            />\n          </FormControl>\n          <FormControl className={classes.margin} variant=\"outlined\">\n            <InputLabel htmlFor=\"goal\">Target Goal</InputLabel>\n            <OutlinedInput\n              id=\"goal\"\n              onChange={handleChange(\"goal\")}\n              value={circleValues.goal}\n              endAdornment={<InputAdornment position=\"end\">circles</InputAdornment>}\n              labelWidth={90}\n            />\n          </FormControl>\n        </div>\n        <div>\n          <TwitterPicker \n              triangle=\"hide\"\n              color={colour}\n              onChangeComplete={(colour) => {setColour(colour.hex)}}\n            />\n          <div id=\"settingsCircle\" style={{ \n              backgroundColor: colour, \n              width: circleValues.circleSize+\"px\",\n              height: circleValues.circleSize+\"px\",\n          }}></div>\n        </div>\n      </div>\n      <Link to={{\n        pathname: \"/reactionGame\",\n        state: {\n          colour: colour,\n          size: circleValues.circleSize,\n          rate: circleValues.shrinkRate,\n          goal: circleValues.goal\n        }\n      }}>\n        <Button className={classes.beginGame} >\n          <Typography style={{ color: \"#8C8185\" }}> Begin Game</Typography>\n        </Button>   \n      </Link>\n    </div>\n  );\n}\n","import { Typography } from '@material-ui/core';\n\nexport default function MemoryExplanation() {\n  return(\n    <div>\n      <Typography variant=\"h4\" gutterBottom style={{ textAlign: \"center\"  }}>\n        How to play \n      </Typography>\n    </div>\n  );\n}\n","import '../App.css';\nimport { useEffect } from 'react';\nimport MemoryExplanation from '../Components/MemoryExplanation';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Typography }  from '@material-ui/core';\nimport TitleBar  from \"../Components/TitleBar\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  controlPanel: {\n    position: \"absolute\",\n    width: 120,\n    backgroundColor: \"white\",\n    padding: 10,\n    bottom: \"50%\",\n    marginLeft: \"15px\",\n    borderRadius: \"15px\"\n  },\n  beginGame: {\n    position: \"absolute\",\n    margin: \"24px\",\n    top: 40,\n    right: 0,\n  }\n});\n\nexport default function MemoryGame() {\n  const classes = useStyles();\n  let currentNumber = 1;\n  let currentLevel = 1;\n  const totalCells = new Array<string>();\n  const boardSize = 5;\n  let gameStarted = false;\n\n  // Reset all the variables and clean the board\n  const clearGame = () => {\n    currentLevel++;\n    currentNumber = 1;\n    totalCells.length = 0;\n    gameStarted = false;\n    for (let i = 0; i < boardSize; i++) { \n      const col = document.getElementById(`col ${i}`);\n      if (col !== null) col.remove();\n    }\n  }\n\n  // Ensure the cards dont reveal before the game started\n  const revealCard = (cell: HTMLDivElement) => {\n    if (gameStarted) {\n      cell.innerHTML = cell.id;\n      cell.style.color = \"white\";\n      if (cell.id !== currentNumber.toString()) {\n        cell.style.backgroundColor = \"red\";\n      } else {\n        cell.style.backgroundColor = \"green\";\n        currentNumber++;\n        // The round is completed\n        if (cell.id === currentLevel.toString()) document.getElementById(\"nextRound\")!.style.display = \"block\";\n      } \n    }\n  }\n  const createGame = (level: number) => {\n    document.getElementById(\"nextRound\")!.style.display = \"none\";\n    const selectNumber = (max: number) => {\n      return Math.floor(Math.random() * max) + 1;\n    }\n  \n    const contains = (array: Array<number>, element: number) => {\n      for(let i = 0; i < array.length; i++) {\n        if(element === array[i]) return true;\n      }\n      return false;\n    }\n\n    for (let i = 0; i < boardSize; i++) {\n      const col = document.createElement(\"div\");\n      col.id = `col ${i}`;\n      for (let j = 0; j < boardSize; j++) {\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"boardCell\");\n        cell.id = `(${i},${j})`;\n        totalCells.push(cell.id);\n        cell.innerHTML = \"\";\n        cell.addEventListener(\"click\", () => {revealCard(cell)}, false);\n        col.appendChild(cell);\n      }\n      if (document.getElementById('memoryBoard') !== null) document.getElementById('memoryBoard')?.appendChild(col);\n    }\n    const addedNumbers = new Array<number>();\n    // New round/game\n    if (currentNumber === 1) addedNumbers.length = 0;\n\n    while (addedNumbers.length < level) {\n      for (let i = 0; i < boardSize**2; i++) {\n        if (selectNumber(2) === 1) {\n          const chosenNum = selectNumber(level);\n          if (document.getElementById(totalCells[i]) !== null) {\n            const cell = document.getElementById(totalCells[i])!;\n            if (!contains(addedNumbers, chosenNum)) {\n              cell.innerHTML = cell.id = chosenNum.toString();\n              addedNumbers.push(chosenNum);\n            } \n          }\n        }\n      }\n    } \n    // Removes white/empty cells\n    for (let i = 0; i < boardSize**2; i++) {\n      const cell = document.getElementById(totalCells[i]);\n      // Populated cell has a \"number\" as id \n      if (cell !== null && cell.id.charAt(0) === \"(\") {\n        document.getElementById(totalCells[i])!.style.display = \"none\";\n      }\n    }\n  }\n\n  useEffect(()=> {\n    createGame(currentLevel);\n  })\n  \n  // Starts the game\n  const startGame = () => {\n    if (gameStarted) return;\n    const board = document.getElementById('memoryBoard');\n    gameStarted = true;\n    if (board !== null) {\n      const rows = board.children;\n      for (let i = 0; i < rows.length; i++) {\n        const row = rows[i].children;\n        for (let i = 0; i < row.length; i++) {\n          const cell = row[i];\n          cell.innerHTML = \" \";\n        }\n      }\n    }\n  }\n\n  // Advances to the next round\n  const nextRound = () => {\n    clearGame();\n    createGame(currentLevel);\n    document.getElementById(\"levelTracker\")!.innerHTML = ` ${currentLevel}`\n  }\n\n  const switchScene = () => {\n    document.getElementById(\"memoryExplanation\")!.style.display = \"none\";\n    document.getElementById(\"memoryGame\")!.style.display = \"block\";\n  }\n\n  return(\n    <div> \n      <TitleBar title={\"Memory Game\"} />\n      <div id=\"memoryExplanation\">\n        <MemoryExplanation />\n        <Button onClick={switchScene} className={classes.beginGame} >\n          <Typography style={{ color: \"#8C8185\"}}> Begin Game</Typography>\n        </Button>\n      </div>\n      <div id=\"memoryGame\"> \n        <div className={classes.controlPanel}> \n          <div>\n            Current Level: <span id=\"levelTracker\">1</span>\n          </div>\n          <div>\n            <Button onClick={startGame}>Start game</Button>\n            <Button id=\"nextRound\" onClick={nextRound}>Next round</Button>\n          </div>\n        </div>\n        <div id=\"memoryBoard\"></div>\n      </div>\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/reaction-colour.e4ae3958.png\";","export default __webpack_public_path__ + \"static/media/memory-colour.a8f728ae.png\";","import { Link } from 'react-router-dom';\nimport ReactionColourIcon from \"../assets/reaction-colour.png\";\nimport MemoryColourIcon from \"../assets/memory-colour.png\";\nimport '../App.css';\nimport { motion } from 'framer-motion';\n\nexport default function GamesMenu() {\n  const mainMenu = {\n    hidden: {\n      x: \"-200vw\"\n    },\n    visible: {\n      x: \"1vw\",\n      transition: {\n        delay: 0.5,\n        when: \"beforeChildren\",\n        stiffness: 45,\n        type:\"spring\",  \n        staggerChildren: 0.3\n      },\n    }, \n  }\n\n  const gameIcon = {\n    hidden: {\n      x: -10,\n      opacity: 0\n    },\n    visible: {\n      x: 0,\n      opacity: 1,\n    }\n  }\n\n  return(\n  <div style={{ display:\"flex\", justifyContent: \"center\" }}>\n    <motion.div \n      id=\"icons\" \n      variants={mainMenu}\n      animate=\"visible\"\n      initial=\"hidden\"\n\n    >\n      <div className=\"games\">\n        <Link to=\"/reactionSetting\">\n          <motion.img src={ReactionColourIcon } alt=\"reaction game\" width=\"150px\" variants={gameIcon}/> \n        </Link>\n      </div>\n      <div className=\"games\" >\n        <Link to=\"/memoryGame\">\n          <motion.img src={MemoryColourIcon} alt=\"memory game\" width=\"150px\" variants={gameIcon}/>\n        </Link>\n      </div>\n    </motion.div>\n    <div id=\"imgReference\">Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">[Freepik]</a> \n    from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">[www.flaticon.com]</a></div>\n  </div>\n  )\n}\n","// import React from 'react';\n// import logo from './logo.svg';\n// import MainScreen from './Pages/MainScreen';\nimport ReactionGame from './Pages/ReactionGame';\nimport ReactionSetting from './Pages/ReactionSetting';\nimport MemoryGame from './Pages/MemoryGame';\nimport GamesMenu from './Pages/GamesMenu';\n// import './App.css';\n// import { MuiThemeProvider, createTheme } from '@material-ui/core/styles';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\n\nexport default function App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <Switch>\n          <Route path=\"/reactionGame\">\n            <ReactionGame />\n          </Route>\n          <Route path=\"/reactionSetting\">\n            <ReactionSetting />\n          </Route>\n          <Route path=\"/memoryGame\">\n            <MemoryGame />\n          </Route>\n          <Route path=\"/\">\n            <GamesMenu />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}